/**
 * @description calculates the factorial of a given integer `n`, recursively multiplying
 * the result by `n-1` if `n` is greater than or equal to 1.
 * 
 * @param { integer } n - value of the integer that determines the calculation of the
 * factorial.
 * 
 * @returns { integer } the value of the given integer `n` multiplied by the result
 * of calling the function with `n - 1` as input.
 */
function factorial(n) {
    if (n === 0 || n === 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

/**
 * @description checks whether a given number is prime by iteratively testing whether
 * it is divisible by any integer between 2 and the square root of the number. If no
 * divisors are found, the function returns `true`.
 * 
 * @param { integer } num - number to be checked for primality.
 * 
 * @returns { boolean } a boolean value indicating whether the input number is prime
 * or not.
 */
function isPrime(num) {
    if (num <= 1) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) return false;
    }
    return true;
}

/**
 * @description converts a temperature in Celsius to its equivalent in Fahrenheit by
 * multiplying the Celsius value by 9/5 and adding 32.
 * 
 * @param { number } celsius - temperature in Celsius that is to be converted to
 * Fahrenheit using the provided formula.
 * 
 * @returns { integer } the temperature in Fahrenheit based on the input Celsius value.
 */
function celsiusToFahrenheit(celsius) {
    return (celsius * 9 / 5) + 32;
}

/**
 * @description finds and returns the maximum value in an array.
 * 
 * @param { array } arr - 1D array whose maximum value is to be found using the
 * `findMax()` function.
 * 
 * @returns { integer } the maximum value found in the given array.
 */
function findMax(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

/**
 * @description reverses a string by splitting it into individual characters, reversing
 * their order, and reconstructing the string.
 * 
 * @param { string } str - string to be reversed.
 * 
 * @returns { string } the original string reversed, without any additional statements
 * or information.
 */
function reverseString(str) {
    return str.split('').reverse().join('');
}

/**
 * @description checks if a given string is a palindrome by comparing it to its
 * reversed version. If the original and reversed strings are identical, the function
 * returns `true`.
 * 
 * @param { string } str - string to be tested for palindromicity.
 * 
 * @returns { boolean } a boolean value indicating whether the given string is a
 * palindrome or not.
 */
function isPalindrome(str) {
    return str === reverseString(str);
}

/**
 * @description generates a random number within a specified range, returning a value
 * between the minimum and maximum values, inclusive of the minimum value.
 * 
 * @param { number } min - minimum possible value that the generated random number
 * can take, and it determines the range of values that the function can produce.
 * 
 * @param { integer } max - highest possible value that the generated random number
 * can take, serving as an upper bound for the random number generated by the function.
 * 
 * @returns { integer } a random number between `min` and `max`.
 */
function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * @description calculates the area of a circle given its radius, returning the value
 * in mathematical notation (πr²) where r is the radius and π is a mathematical
 * constant approximately equal to 3.14.
 * 
 * @param { number } radius - 2D distance from the center of the circle to its boundary,
 * which is used to calculate the area of the circle.
 * 
 * @returns { number } the area of a circle, which is equal to $\pi r^2$ where $r$
 * is the radius of the circle.
 */
function calculateCircleArea(radius) {
    return Math.PI * radius ** 2;
}

/**
 * @description counts the number of occurrences of each element in an array by using
 * reduce() method and creating a new object with counts as properties.
 * 
 * @param { array } arr - array whose element occurrences are to be counted and passed
 * to the reduce function for accumulation.
 * 
 * @returns { object } a count of each element in the input array, represented as an
 * object with the element as a key and its count as its value.
 */
function countOccurrences(arr) {
    return arr.reduce((acc, val) => {
        acc[val] = (acc[val] || 0) + 1;
        return acc;
    }, {});
}

/**
 * @description splits a sentence into individual words, capitalizes the first letter
 * of each word, and then Joins them back together with a space.
 * 
 * @param { string } sentence - text to be capitalized.
 * 
 * @returns { string } a capitalized string of words separated by spaces, created by
 * mapping the first letter of each word to uppercase and joining them with a space.
 */
function capitalizeWords(sentence) {
    return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}
